-- Player logic


-- pre-hashing ids improves performance
local input_left = hash("left")
local input_right = hash("right")
local input_jump = hash("jump")
local anim_walk = hash("walk")
local anim_idle = hash("idle")
local anim_jump = hash("jump")
local anim_fall = hash("fall")

function init(self)
    -- this lets us handle input in this script
    msg.post(".", "acquire_input_focus")

    -- activate camera attached to the player collection
    -- this will send camera updates to the render script
    msg.post("camera", "acquire_camera_focus")

    self.anim = nil

end

local function play_animation(self, anim)
    -- only play animations which are not already playing
    if self.anim ~= anim then
        -- tell the sprite to play the animation
        sprite.play_flipbook("#sprite", anim)
        -- remember which animation is playing
        self.anim = anim
    end
end

function on_message(self, message_id, message, sender)
    if message_id == hash("pos") then
        go.set_position(message.pos)
    elseif message_id == hash("id") then
        label.set_text("#label", message.id)
    end
end

function on_input(self, action_id, action)
    if action.pressed then
        if action_id == input_left then
            msg.post("/level#client", "move", { dir = "l" })
            sprite.set_hflip("#sprite", true)
            play_animation(self, anim_walk)
        elseif action_id == input_right then
            msg.post("/level#client", "move", { dir = "r" })
            sprite.set_hflip("#sprite", false)
            play_animation(self, anim_walk)
        elseif action_id == input_jump then
            msg.post("/level#client", "jump", {})
            play_animation(self, anim_jump)
        end
    elseif action.released then
        if action_id == input_left then
            msg.post("/level#client", "stop", { dir = "l" })
            play_animation(self, anim_idle)
        elseif action_id == input_right then
            msg.post("/level#client", "stop", { dir = "r" })
            play_animation(self, anim_idle)
        end

    end

end